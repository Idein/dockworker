version: 2.1

jobs:
  build_image:
    working_directory: /tmp/dockworker
    machine:
      image: default
    steps:
      - checkout
      - run:
          name: Build docker containers for testing
          command: |
            docker-compose build
            docker save -o test-iostream test-iostream:latest
            docker save -o test-signal   test-signal:latest

      - persist_to_workspace:
          root: /tmp/dockworker
          paths:
            - test-iostream
            - test-signal

  build:
    working_directory: /tmp/dockworker
    docker:
      - image: rust:1.83.0
        environment:
          DOCKER_VERSION: 28.0.0
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/dockworker
      - run:
          name: Setup Packages
          command: |
            apt-get update
            apt-get install -y ca-certificates curl libssl-dev
      - run:
          name: Install Docker Client
          command: |
            # client only
            curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz | tar -zxf - --strip 1 -C /usr/local/bin docker/docker
      - run:
          name: Install rustfmt
          command: |
            rustup component add rustfmt
      - run:
          name: Generate cache key
          command: |
            cat Cargo.toml Cargo.lock >  /tmp/build-dep
            rustc --version           >> /tmp/build-dep
            rustfmt --version         >> /tmp/build-dep
            echo $OS_VERSION          >> /tmp/build-dep
            apt list --installed      >> /tmp/build-dep
      - restore_cache:
          key: cache-cargo-target-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLECI_CACHE_VERSION }}-{{ checksum "/tmp/build-dep" }}
      - run:
          name: Checking source code style
          command: cargo fmt -- --check
      - run:
          name: Build project
          command: |
            RUST_BACKTRACE=1 cargo build --verbose --features ssl
            RUST_BACKTRACE=1 cargo build --examples -j 8
      - run:
          name: Unit testing with ssl feature
          command: |
            RUST_BACKTRACE=1 cargo test -j 8 --verbose --features ssl
      - run:
          name: Unit testing with ssl-rustls feature
          command: |
            RUST_BACKTRACE=1 cargo test -j 8 --verbose --features ssl-rustls
      - run:
          name: More unit testing
          command: |
            docker load -i test-iostream
            docker load -i test-signal
            RUST_BACKTRACE=1 cargo test --verbose --features ssl -- --ignored
      - run:
          name: More unit testing with ssl-rustls
          command: |
            RUST_BACKTRACE=1 cargo test --verbose --features ssl-rustls -- --ignored
      - save_cache:
          key: cache-cargo-target-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLECI_CACHE_VERSION }}-{{ checksum "/tmp/build-dep" }}
          paths:
            - ~/.cargo/registry/
            - target/debug

  publish:
    working_directory: /tmp/dockworker
    docker:
      - image: rust:1.83.0
        environment:
          DOCKER_VERSION: 28.0.0
    steps:
      - checkout
      - run:
          name: Setup Packages
          command: |
            apt-get update
            apt-get install -y ca-certificates libssl-dev
      - run:
          name: publish dockwoker (dryrun)
          command: |
            cargo publish --dry-run --locked
      - run:
          name: publish dockworker
          command: |
            cargo publish --locked

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          requires:
            - build_image
      - build_image
  publish:
    when:
      matches:
        pattern: '^v\d+\.\d+\.\d+'
        value: << pipeline.git.tag >>
    jobs:
      - publish:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - build_image
          filters:
            tags:
              only: /.*/
      - build_image:
          filters:
            tags:
              only: /.*/

 
